/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package de.ancud.shorturl.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import de.ancud.shorturl.model.ShortUrl;
import de.ancud.shorturl.model.ShortUrlModel;
import de.ancud.shorturl.model.ShortUrlSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ShortUrl service. Represents a row in the &quot;shorturl_ShortUrl&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link de.ancud.shorturl.model.ShortUrlModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ShortUrlImpl}.
 * </p>
 *
 * @author David
 * @see ShortUrlImpl
 * @see de.ancud.shorturl.model.ShortUrl
 * @see de.ancud.shorturl.model.ShortUrlModel
 * @generated
 */
@JSON(strict = true)
public class ShortUrlModelImpl extends BaseModelImpl<ShortUrl>
	implements ShortUrlModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a short url model instance should use the {@link de.ancud.shorturl.model.ShortUrl} interface instead.
	 */
	public static final String TABLE_NAME = "shorturl_ShortUrl";
	public static final Object[][] TABLE_COLUMNS = {
			{ "shortUrlId", Types.BIGINT },
			{ "identifier", Types.VARCHAR },
			{ "originalUrl", Types.VARCHAR },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table shorturl_ShortUrl (shortUrlId LONG not null primary key,identifier VARCHAR(75) null,originalUrl STRING null,companyId LONG,groupId LONG,userId LONG,createDate DATE null,modifiedDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table shorturl_ShortUrl";
	public static final String ORDER_BY_JPQL = " ORDER BY shortUrl.shortUrlId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY shorturl_ShortUrl.shortUrlId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.de.ancud.shorturl.model.ShortUrl"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.de.ancud.shorturl.model.ShortUrl"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.de.ancud.shorturl.model.ShortUrl"),
			true);
	public static long GROUPID_COLUMN_BITMASK = 1L;
	public static long IDENTIFIER_COLUMN_BITMASK = 2L;
	public static long ORIGINALURL_COLUMN_BITMASK = 4L;
	public static long SHORTURLID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ShortUrl toModel(ShortUrlSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ShortUrl model = new ShortUrlImpl();

		model.setShortUrlId(soapModel.getShortUrlId());
		model.setIdentifier(soapModel.getIdentifier());
		model.setOriginalUrl(soapModel.getOriginalUrl());
		model.setCompanyId(soapModel.getCompanyId());
		model.setGroupId(soapModel.getGroupId());
		model.setUserId(soapModel.getUserId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ShortUrl> toModels(ShortUrlSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ShortUrl> models = new ArrayList<ShortUrl>(soapModels.length);

		for (ShortUrlSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.de.ancud.shorturl.model.ShortUrl"));

	public ShortUrlModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _shortUrlId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setShortUrlId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _shortUrlId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ShortUrl.class;
	}

	@Override
	public String getModelClassName() {
		return ShortUrl.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("shortUrlId", getShortUrlId());
		attributes.put("identifier", getIdentifier());
		attributes.put("originalUrl", getOriginalUrl());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("userId", getUserId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long shortUrlId = (Long)attributes.get("shortUrlId");

		if (shortUrlId != null) {
			setShortUrlId(shortUrlId);
		}

		String identifier = (String)attributes.get("identifier");

		if (identifier != null) {
			setIdentifier(identifier);
		}

		String originalUrl = (String)attributes.get("originalUrl");

		if (originalUrl != null) {
			setOriginalUrl(originalUrl);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}
	}

	@JSON
	@Override
	public long getShortUrlId() {
		return _shortUrlId;
	}

	@Override
	public void setShortUrlId(long shortUrlId) {
		_columnBitmask = -1L;

		_shortUrlId = shortUrlId;
	}

	@JSON
	@Override
	public String getIdentifier() {
		if (_identifier == null) {
			return StringPool.BLANK;
		}
		else {
			return _identifier;
		}
	}

	@Override
	public void setIdentifier(String identifier) {
		_columnBitmask |= IDENTIFIER_COLUMN_BITMASK;

		if (_originalIdentifier == null) {
			_originalIdentifier = _identifier;
		}

		_identifier = identifier;
	}

	public String getOriginalIdentifier() {
		return GetterUtil.getString(_originalIdentifier);
	}

	@JSON
	@Override
	public String getOriginalUrl() {
		if (_originalUrl == null) {
			return StringPool.BLANK;
		}
		else {
			return _originalUrl;
		}
	}

	@Override
	public void setOriginalUrl(String originalUrl) {
		_columnBitmask |= ORIGINALURL_COLUMN_BITMASK;

		if (_originalOriginalUrl == null) {
			_originalOriginalUrl = _originalUrl;
		}

		_originalUrl = originalUrl;
	}

	public String getOriginalOriginalUrl() {
		return GetterUtil.getString(_originalOriginalUrl);
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			ShortUrl.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ShortUrl toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ShortUrl)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ShortUrlImpl shortUrlImpl = new ShortUrlImpl();

		shortUrlImpl.setShortUrlId(getShortUrlId());
		shortUrlImpl.setIdentifier(getIdentifier());
		shortUrlImpl.setOriginalUrl(getOriginalUrl());
		shortUrlImpl.setCompanyId(getCompanyId());
		shortUrlImpl.setGroupId(getGroupId());
		shortUrlImpl.setUserId(getUserId());
		shortUrlImpl.setCreateDate(getCreateDate());
		shortUrlImpl.setModifiedDate(getModifiedDate());

		shortUrlImpl.resetOriginalValues();

		return shortUrlImpl;
	}

	@Override
	public int compareTo(ShortUrl shortUrl) {
		int value = 0;

		if (getShortUrlId() < shortUrl.getShortUrlId()) {
			value = -1;
		}
		else if (getShortUrlId() > shortUrl.getShortUrlId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ShortUrl)) {
			return false;
		}

		ShortUrl shortUrl = (ShortUrl)obj;

		long primaryKey = shortUrl.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ShortUrlModelImpl shortUrlModelImpl = this;

		shortUrlModelImpl._originalIdentifier = shortUrlModelImpl._identifier;

		shortUrlModelImpl._originalOriginalUrl = shortUrlModelImpl._originalUrl;

		shortUrlModelImpl._originalGroupId = shortUrlModelImpl._groupId;

		shortUrlModelImpl._setOriginalGroupId = false;

		shortUrlModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ShortUrl> toCacheModel() {
		ShortUrlCacheModel shortUrlCacheModel = new ShortUrlCacheModel();

		shortUrlCacheModel.shortUrlId = getShortUrlId();

		shortUrlCacheModel.identifier = getIdentifier();

		String identifier = shortUrlCacheModel.identifier;

		if ((identifier != null) && (identifier.length() == 0)) {
			shortUrlCacheModel.identifier = null;
		}

		shortUrlCacheModel.originalUrl = getOriginalUrl();

		String originalUrl = shortUrlCacheModel.originalUrl;

		if ((originalUrl != null) && (originalUrl.length() == 0)) {
			shortUrlCacheModel.originalUrl = null;
		}

		shortUrlCacheModel.companyId = getCompanyId();

		shortUrlCacheModel.groupId = getGroupId();

		shortUrlCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			shortUrlCacheModel.createDate = createDate.getTime();
		}
		else {
			shortUrlCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			shortUrlCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			shortUrlCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return shortUrlCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{shortUrlId=");
		sb.append(getShortUrlId());
		sb.append(", identifier=");
		sb.append(getIdentifier());
		sb.append(", originalUrl=");
		sb.append(getOriginalUrl());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("de.ancud.shorturl.model.ShortUrl");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>shortUrlId</column-name><column-value><![CDATA[");
		sb.append(getShortUrlId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>identifier</column-name><column-value><![CDATA[");
		sb.append(getIdentifier());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>originalUrl</column-name><column-value><![CDATA[");
		sb.append(getOriginalUrl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ShortUrl.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ShortUrl.class
		};
	private long _shortUrlId;
	private String _identifier;
	private String _originalIdentifier;
	private String _originalUrl;
	private String _originalOriginalUrl;
	private long _companyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _userId;
	private String _userUuid;
	private Date _createDate;
	private Date _modifiedDate;
	private long _columnBitmask;
	private ShortUrl _escapedModel;
}